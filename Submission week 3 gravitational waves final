{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "18SbXPY1m4a0gzggg51nRpb6YKzwYzyzz",
      "authorship_tag": "ABX9TyPMmGDCk3lE1c/ZdmVJJXyO",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/LisavanEijk/PRA3024/blob/master/Submission%20week%203%20gravitational%20waves%20final\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1b8kiTYDsaV2",
        "outputId": "bffeab86-71b2-49d8-885f-c13f888bc657"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting lalsuite\n",
            "  Downloading lalsuite-7.13-cp39-cp39-manylinux_2_28_x86_64.whl (50.3 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m50.3/50.3 MB\u001b[0m \u001b[31m10.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting pycbc\n",
            "  Downloading PyCBC-2.2.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (7.5 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.5/7.5 MB\u001b[0m \u001b[31m32.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: matplotlib in /usr/local/lib/python3.9/dist-packages (from lalsuite) (3.5.3)\n",
            "Requirement already satisfied: astropy in /usr/local/lib/python3.9/dist-packages (from lalsuite) (4.3.1)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.9/dist-packages (from lalsuite) (1.10.1)\n",
            "Collecting ligo-segments\n",
            "  Downloading ligo-segments-1.4.0.tar.gz (51 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m51.0/51.0 KB\u001b[0m \u001b[31m5.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: numpy>=1.7 in /usr/local/lib/python3.9/dist-packages (from lalsuite) (1.22.4)\n",
            "Collecting lscsoft-glue\n",
            "\u001b[33m  WARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ProtocolError('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))': /packages/38/69/d61f13d1ec00e4da9df368c994003412701908cb710dca8da60c71087ed6/lscsoft-glue-3.0.1.tar.gz\u001b[0m\u001b[33m\n",
            "\u001b[0m  Downloading lscsoft-glue-3.0.1.tar.gz (1.4 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.4/1.4 MB\u001b[0m \u001b[31m12.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n",
            "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.9/dist-packages (from lalsuite) (2.8.2)\n",
            "Collecting python-ligo-lw>=1.7.0\n",
            "  Downloading python-ligo-lw-1.8.3.tar.gz (2.3 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.3/2.3 MB\u001b[0m \u001b[31m63.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.9/dist-packages (from pycbc) (4.65.0)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.9/dist-packages (from pycbc) (3.1.2)\n",
            "Collecting pegasus-wms.api>=5.0.3\n",
            "  Downloading pegasus-wms.api-5.0.5.tar.gz (44 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.4/44.4 KB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: h5py!=3.7.0,>=3.0.0 in /usr/local/lib/python3.9/dist-packages (from pycbc) (3.1.0)\n",
            "Collecting gwdatafind\n",
            "  Downloading gwdatafind-1.1.3-py3-none-any.whl (45 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m45.4/45.4 KB\u001b[0m \u001b[31m5.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: cython>=0.29 in /usr/local/lib/python3.9/dist-packages (from pycbc) (0.29.33)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.9/dist-packages (from pycbc) (63.4.3)\n",
            "Requirement already satisfied: pillow in /usr/local/lib/python3.9/dist-packages (from pycbc) (8.4.0)\n",
            "Requirement already satisfied: beautifulsoup4>=4.6.0 in /usr/local/lib/python3.9/dist-packages (from pycbc) (4.9.3)\n",
            "Collecting mpld3>=0.3\n",
            "  Downloading mpld3-0.5.9-py3-none-any.whl (201 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m201.2/201.2 KB\u001b[0m \u001b[31m22.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting Mako>=1.0.1\n",
            "  Downloading Mako-1.2.4-py3-none-any.whl (78 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m78.7/78.7 KB\u001b[0m \u001b[31m10.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: pyerfa>=1.7.3 in /usr/local/lib/python3.9/dist-packages (from astropy->lalsuite) (2.0.0.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.9/dist-packages (from beautifulsoup4>=4.6.0->pycbc) (2.4)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.9/dist-packages (from lscsoft-glue->lalsuite) (1.15.0)\n",
            "Collecting pyRXP\n",
            "  Downloading pyRXP-3.0.1-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (297 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m297.9/297.9 KB\u001b[0m \u001b[31m25.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting pyOpenSSL\n",
            "  Downloading pyOpenSSL-23.0.0-py3-none-any.whl (57 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m57.3/57.3 KB\u001b[0m \u001b[31m6.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: MarkupSafe>=0.9.2 in /usr/local/lib/python3.9/dist-packages (from Mako>=1.0.1->pycbc) (2.1.2)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib->lalsuite) (4.39.0)\n",
            "Requirement already satisfied: pyparsing>=2.2.1 in /usr/local/lib/python3.9/dist-packages (from matplotlib->lalsuite) (3.0.9)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.9/dist-packages (from matplotlib->lalsuite) (1.4.4)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.9/dist-packages (from matplotlib->lalsuite) (0.11.0)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib->lalsuite) (23.0)\n",
            "Collecting pegasus-wms.common\n",
            "  Downloading pegasus-wms.common-5.0.5.tar.gz (41 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m41.2/41.2 KB\u001b[0m \u001b[31m4.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: pyyaml in /usr/local/lib/python3.9/dist-packages (from python-ligo-lw>=1.7.0->pycbc) (6.0)\n",
            "Collecting igwn-auth-utils>=0.3.1\n",
            "  Downloading igwn_auth_utils-0.4.0-py3-none-any.whl (22 kB)\n",
            "Collecting scitokens>=1.7.0\n",
            "  Downloading scitokens-1.7.4-py3-none-any.whl (27 kB)\n",
            "Collecting safe-netrc>=1.0.0\n",
            "  Downloading safe_netrc-1.0.1-py3-none-any.whl (10 kB)\n",
            "Requirement already satisfied: requests>=2.14 in /usr/local/lib/python3.9/dist-packages (from igwn-auth-utils>=0.3.1->gwdatafind->pycbc) (2.25.1)\n",
            "Collecting cryptography>=2.3\n",
            "  Downloading cryptography-39.0.2-cp36-abi3-manylinux_2_28_x86_64.whl (4.2 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.2/4.2 MB\u001b[0m \u001b[31m64.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: cffi>=1.12 in /usr/local/lib/python3.9/dist-packages (from cryptography>=2.3->igwn-auth-utils>=0.3.1->gwdatafind->pycbc) (1.15.1)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.9/dist-packages (from requests>=2.14->igwn-auth-utils>=0.3.1->gwdatafind->pycbc) (2.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.9/dist-packages (from requests>=2.14->igwn-auth-utils>=0.3.1->gwdatafind->pycbc) (2022.12.7)\n",
            "Requirement already satisfied: chardet<5,>=3.0.2 in /usr/local/lib/python3.9/dist-packages (from requests>=2.14->igwn-auth-utils>=0.3.1->gwdatafind->pycbc) (4.0.0)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.9/dist-packages (from requests>=2.14->igwn-auth-utils>=0.3.1->gwdatafind->pycbc) (1.26.15)\n",
            "Collecting PyJWT>=1.6.1\n",
            "  Downloading PyJWT-2.6.0-py3-none-any.whl (20 kB)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.9/dist-packages (from cffi>=1.12->cryptography>=2.3->igwn-auth-utils>=0.3.1->gwdatafind->pycbc) (2.21)\n",
            "Building wheels for collected packages: lscsoft-glue, pegasus-wms.api, python-ligo-lw, ligo-segments, pegasus-wms.common\n",
            "  Building wheel for lscsoft-glue (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for lscsoft-glue: filename=lscsoft_glue-3.0.1-cp39-cp39-linux_x86_64.whl size=262714 sha256=79fd9287a5f05c5ede107244cc33b87e664159d394bf7ecc807203752cb425a3\n",
            "  Stored in directory: /root/.cache/pip/wheels/49/14/fb/7969947b8a18347925a86d2f70e7f600512ed7857bc5cfe9b0\n",
            "  Building wheel for pegasus-wms.api (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pegasus-wms.api: filename=pegasus_wms.api-5.0.5-py3-none-any.whl size=50027 sha256=7345241cf90ed7d601786c094701adbb8ec74ad88ee2bd1f7662e52f1b2d8d87\n",
            "  Stored in directory: /root/.cache/pip/wheels/60/06/98/0b96d42a23c8fbc8234ecc698deaea58fa75f2abfa661020bd\n",
            "  Building wheel for python-ligo-lw (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for python-ligo-lw: filename=python_ligo_lw-1.8.3-cp39-cp39-linux_x86_64.whl size=165753 sha256=03abcf75efaf24b696ececb644be95b092bbfa744e1d6800041bd935adeffcb6\n",
            "  Stored in directory: /root/.cache/pip/wheels/24/4a/01/2b07c68ddef2b4de5051b79a49fb1f9a80a93b075cbf6f3269\n",
            "  Building wheel for ligo-segments (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for ligo-segments: filename=ligo_segments-1.4.0-cp39-cp39-linux_x86_64.whl size=100826 sha256=290e511f5b9ff3056202741db3691cbe2d0ea30a78f367a0f3738d1d8765e1c4\n",
            "  Stored in directory: /root/.cache/pip/wheels/bf/48/4b/3b25ac327f65168ccf3ca1f7321bb533db6de5123847f9c6f7\n",
            "  Building wheel for pegasus-wms.common (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pegasus-wms.common: filename=pegasus_wms.common-5.0.5-py3-none-any.whl size=46253 sha256=181756f63dc5446680fb80dbcb62ae1b0a93ed664c8e6d5dab62bc67cb0242a2\n",
            "  Stored in directory: /root/.cache/pip/wheels/d1/b7/c9/73d74603a7dedef62914fee6510561dc5db6b7622e501ed625\n",
            "Successfully built lscsoft-glue pegasus-wms.api python-ligo-lw ligo-segments pegasus-wms.common\n",
            "Installing collected packages: safe-netrc, pyRXP, PyJWT, pegasus-wms.common, Mako, ligo-segments, pegasus-wms.api, cryptography, scitokens, pyOpenSSL, mpld3, lscsoft-glue, igwn-auth-utils, python-ligo-lw, lalsuite, gwdatafind, pycbc\n",
            "Successfully installed Mako-1.2.4 PyJWT-2.6.0 cryptography-39.0.2 gwdatafind-1.1.3 igwn-auth-utils-0.4.0 lalsuite-7.13 ligo-segments-1.4.0 lscsoft-glue-3.0.1 mpld3-0.5.9 pegasus-wms.api-5.0.5 pegasus-wms.common-5.0.5 pyOpenSSL-23.0.0 pyRXP-3.0.1 pycbc-2.2.0 python-ligo-lw-1.8.3 safe-netrc-1.0.1 scitokens-1.7.4\n"
          ]
        }
      ],
      "source": [
        "# This is my submission for the week 3 assignment: gravitational waves. \n",
        "# By: Lisa van Eijk\n",
        "# Student ID: i6294465\n",
        "# Importing pycbc.\n",
        "import sys\n",
        "!{sys.executable} -m pip install lalsuite pycbc"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Importing things I will need. \n",
        "from pycbc.frame import read_frame\n",
        "from pycbc.filter import highpass_fir, lowpass_fir\n",
        "from pycbc.waveform import get_fd_waveform\n",
        "from pycbc.waveform import td_approximants, fd_approximants\n",
        "from pycbc.psd import welch, interpolate\n",
        "from pycbc.catalog import Merger\n",
        "import pylab\n",
        "from pycbc.types import  FrequencySeries, TimeSeries\n",
        "from scipy import interpolate\n",
        "import numpy as np\n",
        "from pycbc import frame\n",
        "import pycbc\n",
        "from pycbc.filter import resample_to_delta_t, highpass\n",
        "import matplotlib.mlab as mlab\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy.stats import norm \n",
        "from pycbc.detector import Detector\n",
        "from scipy.interpolate import interp1d\n",
        "from pycbc.filter import highpass\n",
        "from pycbc import types \n",
        "from pycbc.filter import matched_filter\n",
        "from pycbc.conversions import mass1_from_mchirp_q\n",
        "from pycbc.waveform import get_td_waveform\n",
        "import pycbc.psd"
      ],
      "metadata": {
        "id": "Vo_4eX-Bt8Pn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Mounting my drive so I can access the data files.\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CMi7Y3M5t8CA",
        "outputId": "02fe6f80-9158-494f-821c-bf78110265a7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# The merger stopped working today (15 march) and I do not know what is wrong sadly. \n",
        "merger = Merger(\"GW170817\")"
      ],
      "metadata": {
        "id": "fvREsxM46swO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Problem 1. Part 1. Loading the data.**"
      ],
      "metadata": {
        "id": "dVU6CTjAzRzt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from pycbc.catalog import Merger\n",
        "from pycbc.filter import resample_to_delta_t, highpass\n",
        "# Calling the data file and naming it so it can be used later. \n",
        "d = np.load('/content/drive/MyDrive/GW_noisedata-2.npy') \n",
        "dt = d[:, 0]\n",
        "\n",
        "# Converting gravitational wave to time series. \n",
        "data_H1 = pycbc.types.TimeSeries(d[:, 1], delta_t = dt[1]- dt[0], epoch=dt[0]) \n",
        "data_L1 = pycbc.types.TimeSeries(d[:, 2], delta_t = dt[1]- dt[0], epoch=dt[0])\n",
        "\n",
        "\n",
        "strain, stilde = {}, {}\n",
        "\n",
        "# Cutting out frequencies below 15 Hz since the detector is not sensitive below this frequency. \n",
        "# Downsampeling sampeling rate to 2048 Hz. \n",
        "# H1 is data from the Hanford detector. L1 is data from the Livingston detector. \n",
        "strain['H1'] = resample_to_delta_t(highpass(data_H1, 15.0), 1.0/2048)\n",
        "\n",
        "strain['L1'] = resample_to_delta_t(highpass(data_L1, 15.0), 1.0/2048)\n",
        "\n",
        " \n",
        "# Removing beginning and end spikes data. \n",
        "strain['H1'] = strain['H1'].crop(4, 4)\n",
        "\n",
        "strain['L1'] = strain['L1'].crop(4, 4)\n",
        "\n",
        " \n",
        "# Putting the data in a frequency series instead of time series. \n",
        "stilde['H1'] = strain['H1'].to_frequencyseries()\n",
        "\n",
        "stilde['L1'] = strain['L1'].to_frequencyseries()"
      ],
      "metadata": {
        "id": "5TXi2MzFvlPT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Plotting data. \n",
        "pylab.plot(strain['H1'].sample_times, strain['H1'], label= 'H1')\n",
        "pylab.plot(strain['L1'].sample_times, strain['L1'], label= 'L1')\n",
        "pylab.legend()\n",
        "pylab.xlabel('Time (s)')\n",
        "pylab.ylabel('strain')\n",
        "pylab.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 290
        },
        "id": "LgOL16o6wcGA",
        "outputId": "9b619515-27b3-40b1-861e-be2478328216"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Problem 1. Part 2. Generating waveforms.**"
      ],
      "metadata": {
        "id": "_kxnPzYXzd8B"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Downloading the approximants to be able to use the approximation for the waveform.  \n",
        "from pycbc.waveform import td_approximants, fd_approximants\n",
        "print(td_approximants())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "we6KJWwyzPL2",
        "outputId": "dda60c53-8a43-49aa-c47f-decc8813369a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['TaylorT1', 'TaylorT2', 'TaylorT3', 'SpinTaylorT1', 'SpinTaylorT4', 'SpinTaylorT5', 'PhenSpinTaylor', 'PhenSpinTaylorRD', 'EOBNRv2', 'EOBNRv2HM', 'TEOBResum_ROM', 'SEOBNRv1', 'SEOBNRv2', 'SEOBNRv2_opt', 'SEOBNRv3', 'SEOBNRv3_pert', 'SEOBNRv3_opt', 'SEOBNRv3_opt_rk4', 'SEOBNRv4', 'SEOBNRv4_opt', 'SEOBNRv4P', 'SEOBNRv4PHM', 'SEOBNRv2T', 'SEOBNRv4T', 'SEOBNRv4_ROM_NRTidalv2', 'SEOBNRv4_ROM_NRTidalv2_NSBH', 'HGimri', 'IMRPhenomA', 'IMRPhenomB', 'IMRPhenomC', 'IMRPhenomD', 'IMRPhenomD_NRTidalv2', 'IMRPhenomNSBH', 'IMRPhenomHM', 'IMRPhenomPv2', 'IMRPhenomPv2_NRTidal', 'IMRPhenomPv2_NRTidalv2', 'TaylorEt', 'TaylorT4', 'EccentricTD', 'SpinDominatedWf', 'NR_hdf5', 'NRSur7dq2', 'NRSur7dq4', 'SEOBNRv4HM', 'NRHybSur3dq8', 'IMRPhenomXAS', 'IMRPhenomXHM', 'IMRPhenomPv3', 'IMRPhenomPv3HM', 'IMRPhenomXP', 'IMRPhenomXPHM', 'TEOBResumS', 'IMRPhenomT', 'IMRPhenomTHM', 'IMRPhenomTP', 'IMRPhenomTPHM', 'TaylorF2', 'SEOBNRv1_ROM_EffectiveSpin', 'SEOBNRv1_ROM_DoubleSpin', 'SEOBNRv2_ROM_EffectiveSpin', 'SEOBNRv2_ROM_DoubleSpin', 'EOBNRv2_ROM', 'EOBNRv2HM_ROM', 'SEOBNRv2_ROM_DoubleSpin_HI', 'SEOBNRv4_ROM', 'SEOBNRv4HM_ROM', 'IMRPhenomD_NRTidal', 'SpinTaylorF2', 'TaylorF2NL', 'PreTaylorF2', 'SpinTaylorF2_SWAPPER']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pylab\n",
        "from pycbc.waveform import get_td_waveform\n",
        "from pycbc import waveform\n",
        "from pycbc.conversions import mass1_from_mchirp_eta\n",
        "from pycbc.conversions import mass2_from_mchirp_eta\n",
        "# Generate a waveform following the same procedure in waveform_overlap.ipynb\n",
        "def generate_waveform(apx, m_chirp, eta, redshift, delta_t, flow, fmax):\n",
        "    m1, m2 = mass1_from_mchirp_eta(m_chirp, eta), mass2_from_mchirp_eta(m_chirp, eta)\n",
        "    s1x, s1y, s1z = 0.0, 0.0, 0.0\n",
        "    s2x, s2y, s2z = 0.0, 0.0, 0.0\n",
        "    distance = 78\n",
        "    inclination_angle = 0.0\n",
        "    hp, hc = get_td_waveform(approximant=apx,\n",
        "                                 mass1= m1 ,\n",
        "                                 mass2=m2 ,\n",
        "                                 delta_t=1.0/4096,\n",
        "                                 f_lower=flow)\n",
        "    \n",
        "    return hp, hc"
      ],
      "metadata": {
        "id": "nTE52YBozsiT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Importing more stuff. \n",
        "from pycbc.waveform import get_fd_waveform\n",
        "from pycbc.filter import matched_filter\n",
        "from pycbc.conversions import mass1_from_mchirp_q\n",
        "import numpy\n",
        "import pycbc.psd\n",
        "from pycbc.psd import interpolate"
      ],
      "metadata": {
        "id": "XEbkW_ZeShcR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Plotting the signal to noise. "
      ],
      "metadata": {
        "id": "RiaSmoKo-asR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating a place to save the power spectral densities\n",
        "psds = {}\n",
        "# Getting the power spectral densities\n",
        "for ifo in ['L1', 'H1']:\n",
        "\n",
        "    delta_t = strain[ifo].delta_t\n",
        "    seg_len = int(2 / delta_t)\n",
        "    seg_stride = int(seg_len / 2)\n",
        "    psds[ifo]  = pycbc.psd.welch(strain[ifo],\n",
        "                      seg_len=seg_len,\n",
        "                      seg_stride=seg_stride)\n",
        "    \n",
        "    psds[ifo] = interpolate(psds[ifo], stilde[ifo].delta_f)\n",
        "# Setting the range for the masses between 1 and 3 solar masses, going over this range in steps of 0.010 solar masses. \n",
        "mass1 = numpy.arange(1, 3,0.010 ) \n",
        "mass2 = mass1\n",
        "\n",
        "# Variables to store when we've found the max for the snr\n",
        "hmax, smax, tmax, mmax, nsnr = None, {}, {}, 0, 0\n",
        "snrs = {}\n",
        "ifo = 'H1'\n",
        "Snr_list = []\n",
        "# Hanford detector. \n",
        "for i in range(len(mass1)):\n",
        "    m = mass1[i] \n",
        "    # Generating the waveform. \n",
        "    hp, hc = get_td_waveform(approximant=\"TaylorT2\",\n",
        "                     mass1=m,\n",
        "                     mass2=m,\n",
        "                     delta_t=strain[ifo].delta_t,\n",
        "                     f_lower=15.0)\n",
        "    # Resizing vector to match the data. \n",
        "    hp.resize(len(strain[ifo]))\n",
        "    template = hp.cyclic_time_shift(hp.start_time)\n",
        "    \n",
        "    snr = matched_filter(template, strain[ifo],\n",
        "                     psd=psds[ifo], low_frequency_cutoff=15.0)\n",
        "    snr_H1 = snr.crop(4 + 4, 4)\n",
        "\n",
        "    # Adding all of the signal to noise ratios to the list. \n",
        "    Snr_list.append(max(abs(snr_H1)))\n",
        "# Putting all the signal to noise ratio's into a list. \n",
        "snrs[ifo] = Snr_list\n",
        "\n",
        "# Now repeating the same for the Livingstone detector. \n",
        "ifo = 'L1'\n",
        "Snr_list = []\n",
        "for i in range(len(mass1)):\n",
        "    m = mass1[i] \n",
        "    # Generating the waveform. \n",
        "    hp, hc = get_td_waveform(approximant=\"TaylorT2\",\n",
        "                     mass1=m,\n",
        "                     mass2=m,\n",
        "                     delta_t=strain[ifo].delta_t,\n",
        "                     f_lower=15.0)\n",
        "\n",
        "    # Resizing vector to match the data. \n",
        "    hp.resize(len(strain[ifo]))\n",
        "    template = hp.cyclic_time_shift(hp.start_time)\n",
        "    \n",
        "    snr = matched_filter(template, strain[ifo],\n",
        "                     psd=psds[ifo], low_frequency_cutoff=15.0)\n",
        "    snr_H1 = snr.crop(4 + 4, 4)\n",
        "\n",
        "\n",
        "    Snr_list.append(max(abs(snr_H1)))\n",
        "# Putting all the signal to noise ratio's into a list. \n",
        "snrs[ifo] = Snr_list\n",
        "# Plotting the signal to noise of the Livingstone and Hanford detectors. \n",
        "pylab.figure(figsize=[10, 4])\n",
        "pylab.plot(mass1, snrs['H1'], label= 'H1')\n",
        "pylab.plot(mass1, snrs['L1'], label= 'L1')\n",
        "pylab.legend('True')\n",
        "pylab.ylabel('Signal-to-noise')\n",
        "pylab.xlabel('mass')\n",
        "pylab.show()"
      ],
      "metadata": {
        "id": "h9KpssdnSpoE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "82a95a11-7af0-496d-d0f5-a51a8f09287b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Total signal to noise ration is Hanford snr + Livingstone snr times their respective weights. \n",
        "nsnr = (numpy.array(snrs['H1'])**2 + numpy.array(snrs['L1'])**2)**0.5\n",
        "ii = numpy.where(nsnr == max(nsnr))\n",
        "# Plotting the total snr. \n",
        "pylab.figure(figsize=[10, 4])\n",
        "pylab.plot(mass1, nsnr)\n",
        "\n",
        "pylab.ylabel('Network Signal-to-noise')\n",
        "pylab.xlabel('mass')\n",
        "pylab.show()\n",
        "\n",
        "print(\"We found the best Mass1=Mass2 was %2.2f solar masses (detector frame)\" % mass1[ii])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "Gux_6N-a-U11",
        "outputId": "20baa0d8-95d9-4642-fa27-4dab167f41e5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "We found the best Mass1=Mass2 was 1.06 solar masses (detector frame)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# So the chirp mass is 1.10 solar masses. \n",
        "m = 1.06\n",
        "conditioned = strain['H1']\n",
        "hp, hc = get_td_waveform(approximant=\"TaylorT2\",\n",
        "                     mass1=m,\n",
        "                     mass2=m,\n",
        "                     delta_t=conditioned.delta_t,\n",
        "                     f_lower=25.0)\n",
        "\n",
        "# We will resize the vector to match our data\n",
        "hp.resize(len(conditioned))\n",
        "# Fitting the vector to the data. \n",
        "template = hp .cyclic_time_shift(hp.start_time)\n",
        "pylab.plot(hp.sample_times, template)\n",
        "pylab.xlabel('time')\n",
        "pylab.ylabel('strain')\n",
        "pylab.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 290
        },
        "id": "lplVQSvNGa2S",
        "outputId": "38896510-2bb1-4b2b-afb3-2e4c8065206c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Drawing template waveform over data. "
      ],
      "metadata": {
        "id": "I5kiUG01Cg7v"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Getting the signal. \n",
        "\n",
        "from pycbc.filter import matched_filter\n",
        "import numpy\n",
        "\n",
        "ifo = 'H1'                            \n",
        "conditioned = strain[ifo]\n",
        "snr = matched_filter(template, conditioned,\n",
        "                     psd=psds[ifo] , low_frequency_cutoff=25)\n",
        "# Cropping to remove time corrupted by template filter and psd filter. I added more padding since the masses are very low, which would be more likely of neutron stars than black holes. \n",
        "snr = snr.crop(8 + 8, 8)\n",
        "pylab.figure(figsize=[10, 4])\n",
        "pylab.plot(snr.sample_times, abs(snr))\n",
        "pylab.ylabel('Signal-to-noise')\n",
        "pylab.xlabel('Time (s)')\n",
        "pylab.show()\n",
        "\n",
        "peak = abs(snr).numpy().argmax()\n",
        "snrp = snr[peak]\n",
        "time = snr.sample_times[peak]\n",
        "\n",
        "print(\"We found a signal at {}s with SNR {}\".format(time, \n",
        "                                                    abs(snrp)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        },
        "id": "xlRNXdHdH0Iz",
        "outputId": "060450e1-c0c7-4739-c56f-ed14cef513db"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAlcAAAEJCAYAAAC5VwKeAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/NK7nSAAAACXBIWXMAAAsTAAALEwEAmpwYAAA9KklEQVR4nO3dd3wUdfoH8M9DERQBCxELYuweFlSwYsUOnJ6ed+qd/O6s593ZPe9QLHj2rng2BMUC2FGkhN6rAQKEEEpI6CQhpNfN5vn9sbNhs9kyuzuzs5t83q8XL3ZnZ2e+m9mdeeZbnq+oKoiIiIjIGm2cLgARERFRS8LgioiIiMhCDK6IiIiILMTgioiIiMhCDK6IiIiILMTgioiIiMhC7ezcuIjkASgH4AZQr6p97dwfERERkdNsDa4Ml6vqnjjsh4iIiMhx8QiuTOvWrZumpqY6XQwiIiKisJYvX75HVVP8l9sdXCmAaSKiAD5W1RGhVk5NTUV6errNRSIiIiKKnYhsCbTc7uDqIlXdISKHAZguItmqOs+vYPcCuBcAevbsaXNxiIiIiOxl62hBVd1h/F8AYDyAcwOsM0JV+6pq35SUZjVrREREREnFtuBKRDqJSGfvYwBXA8i0a39EREREicDOZsHuAMaLiHc/Y1U1zcb9ERERETnOtuBKVTcD6G3X9omIiIgSETO0ExEREVmIwRURERGRhRhcERFRqzA9Kx8FZTVOF4NaAQZXRETU4tW7G3DPF+m4dcQSp4tCrQCDKyIiavHU+H/r3ipHy0GtA4MrIiIiIgsxuCIiIiKyEIMrIiIiIgsxuCIiIiKyEIMrIiIiIgsxuCIiIiKyEIMrIiIislyNy+10ERzD4IqoFRoxLwert5c4XQwiaqHW7izFKU+nIS1zl9NFcQSDqyhV1NbD5W5wuhhEUXlpcjau/99Cp4tBRC3U6u2lAIA56wsdLokzGFxF6bRnp+Luz9OdLga1IqXVLuTuqXS6GERJSTX8OkRWYXAVg7kbzEfkdfUNOO+lGa22ijRWI+blYNGmPU4Xw1E3vr8Ql78xx+liECU1EadLQK0Bg6s42VtZh/yyWjw7Ya3TRUloqor0vL1Qv9vMlyZn408jlzpUqsSwmbVW1MqV17jw5Pg1qKqrd7ooRCExuKKE8m36Ntz80WJMXrPb6aJQC6OqqE+wfpKLc4qQvbvM6WIkjY/m5mDs0q0YvSjP6aIQhcTgihKKt3aGM9fvk1NYgdIql9PFSHqjFuTihKFTsLeyzumiNLrtkyW49p35Thcj4VXV1WPYhLWorPUM7Wf/KUp0DK6C2La3CqlDJmFxThEAYHdpDTYVlDtcKmqNrnhzLq5/f4HTxUh63y/fDsDzW6bkMnJ+LkYvygtYY7Uhv7xZNwIipzG4CmJZ7l4AwHfp2wAA5788E1e+Nc/JIlErtqWINXnUetU3BA6eFm7ag6vfnodxy7aZ3hbjsMSUU1iBe75IR219y0g8yuAqRs/+nImLXp3ldDGIKE7cDYrv0rfBHeSCn+j2VNSisrZldAj3diNYu7M07LocJehRW+9OyAEBT43PxPSsfCzPK3a6KJZgcBWjzxdvwfbiaqeLQZQUdpfW4KeVO5wuRky+WJyHx79fjbHLtjpdlKj0fWEGrn675dXCT1y9E8UJ1J8uUV3z9jz0emaq08Vo8RhcEVHc/GnkEjz8TUZC3jmb5e0Qn8wX8h0lLeuGML+sFvePXYm/fbnc6aJYamN+OX4w+gpaJS/OXQzsboYtrXJh5dbEq+1icGWCmSpnSh6F5bVIHTKpsT8dxY+3Mzn7vZCV6owUGztLgweNyfidu+rteXjsu1VOFyMq8WqF/fOoJbjxg0Vx2pt5rS642lpUhW0RDPNPW7sbA4dzpFZL4p1C5lsGV5Sgtu2tSuqasUTGvlctS+aOxMwT187pAsTbJa/PBgDkvTLQ1PpVddaOXEjGu6cxS7cAAP583jEOl4QS2d7KOgiAgzvtF3Qd76ivJPwZxNXFr3nOU20E2PyyuXNVSzZ6YW6T56u2lQRcb3txNVQVwgiKHNbqaq6cksy/9aHjMzF0fGZ8dsarriNmZOU3BtHROvv56Tjr+ekh16mr9zTfTFnDOTbNSNIBiZYrq2naRy/U3yWnkNNEJSMNcvL/OWMHVm8viW9hLNDqaq5ao/yyGnTdvz06tm/rdFFMS+ZgNBnd/UU6AGDQ6UeitNqFnoceYOv+iqucb/LamF+OTQUVuO70I5wuClmICUWTnN+5/6GvMwCYb21KFKy5agXOe2km7jEunkShXPvuvMam85buqrfn4e9jVjhdjKgVVdTi1hGLUVhe63RR4s7Km696dwMDMhs48Rctq3Fh3a7E6IPF4CoIJ2pOGho0os72kZi/cY8t26WWZRenholIabXLsYScY5duxZLNe/F5lJMY3zX6V+SXte7jXVBWgxOGTsFXS2JrEm9N/vDRIpz2rPk8WfG8lg4euRTXvZsYc3UyuEogH8/bjItfm42N+ZzD0E4t+S51c2FFwny+i16dhXdnbHS6GFEb9N58vD41u8myDfnlmLR6X3+x3s9NQ78knaFhZnYBhs9M3uNjhW3FnpvZ8XFKbKuqKKtJ7knYf80rRkWCZvhftT1x0ibZHlyJSFsRWSkiE+3eV7JbmuuZJLqlZHzfW1ln6yS5+WU1jQkdoyFxy8QSHws27kH/N+c2TlDstO3F1Xh7xgYAQFrmLqQOmdT4WjL87TN3lOH92TlNll399rzGKVe8Sqrsv1i2lPnW7JL43yaPr5ZswRnDpiFvDzvdt3TxqLl6CMC6OOynVRk2YS3GLdsKd4OiIcIhRd+lb8Pdn/9qU8n2Ofv56Tj/5Zm2bf+8l2bi7DCj01qTjQWeGs+1OxOjz4GvLxa3vGaXeF3Qp2fl4+Sn0pC5I/Bd+caCchRVtL5+V8GYORvWuxsCnjd3llRjWe5e6wtlmLGuAACQW2RNcKWqts1x6W5QbC6ssGXbrYGtwZWI9AAwEMBIO/fT2qzbVYbRi/LwxI9r0OuZNFz2xpyI3v/496sbf+ROGPLDanzml7empVi6uQgZQXLwUHA5hRWYnpXvdDES0qxsz291ld9wdG9flqlr83FVC5wrMBKRhhcnDJ2CIT+ubra8/5tz8MePFwd938b8cny6IHHOXYNHLcPxT062ZdtvT9+A/m/OjTnAMttLIUF6M1jG7pqrdwD8G0CDzfuxzLAJa5s0XySazB2lTTrs1dY3YKvJTvAXvzYLLrfzh+LrX7fhuV+ynC6GLW4ZsQS/e3+h08VwVOqQSXjHaA4064o353JEaxDjTEwQHUvzeDyVVrmQOmSSZQFKJLWH/nmUvk1v3nxe4wp9fhz03gL8d2LinLsWbDI3UOnrZVuROmQSalzmm5eX5Xlq8ApMjEZdta0Et3y8GEs3F6HeuMZEW7ObDF0GzLAtuBKRQQAKVDXkTJoicq+IpItIemFhoV3FMW10lCNvzIo1OI+lD9O2vdX4rwVBTeqQSXjkm4yYt1Ne48J/f8mK6AdPwSXSnd+Hc3JCvh7tCKKFm/YgdcgkFJS37lFudql3N2B7cRUyd5RGfCN2zdvzmmVS97fbGJ349a/hA0a7xHLxrq13/uY0Gt6+j9H0DxxlIhB+cvwaLM3di1tGLME7STyIxUp21lz1A3C9iOQB+BpAfxH5yn8lVR2hqn1VtW9KSoqNxYmPGpc7YACUKLH4l2GGHP/2vQXo/+acsNuxYnTNuzM24tOFufjmV3vm+Juwaieue3d+s9FzCRSDJLwVW4uROmRS0H4oNS53XEcnfrYwDwCQsbUkbvtsKUYvzA2b6uWFSetw0auzMei9BXhxUmRdZdfnl2OYyZu3DfkVWLsz+pFdqkBVXT3mrI/8hjxYJnAKLNLm+uzdidfn0wm2BVeq+oSq9lDVVAC3ApilqrfbtT+rPfptdDORn/J0mq2duO22ZkcpNsdp+gjvPHMNPhfnaE57wXL1PDhuZeiEcokS8dqsrMYV9fQRC4z8aPM3Nr+Ilde4cMrTaXh7evgmwESqVbPD0s1FWJxTFNM2XkvLxqURJHCNZP680ioXhv2ShT+NXBJyPd/jbPeUI/d9FbJRI6yh4zMxY13zC3+w71qoGquW8PV8LS074O+UnME8VwmioLwmqruwQDK2leD92Zss2Va8/Jq3F6lDJmH5lmIAkcU9LXlYczR39+4GxX1fLkeWMWrwr58uw/X/W2h5DZO3ieHHOOUISmS3jFiC2z4JHbiE88GcHGwpsieJsPcGptxvjr5knmbKt6N19B8jif8Afj6Yk4PBo5ZF/L6MbSXNumYUVdTaOmqyNYhLcKWqc1R1UDz2layesnBi5N+9vxCvT11v2fbiYd4GT2DpDa6S0enDzGctNmvg8AWm1/WGThsLypG2djce/TYDALCCTWhNRBpQPPz1Ssxe79zoWq+W0tHXDskcJMZTfUPTPmPb9lbhd+8vxLM/r22y/G9fxlar6K+itj7gzd3ohblYuTV5z/mhsOYqASzatAel1fs6GraWPgHhalKKKmoTsrN7abULoxbkNiu/f62AUxLhItySvsE/ZezEHZ/ZnxcuWWTtLEOJwxNviyRWNm67TVi1E+e/NNN0TqvFOUVYv3vfTB/5ZZ4Rf69MaTrjgPe6k+lXQ27lNFiFFbU47dmp+CDAIJdhv2Thxg8WAWhZ5wyAwZXjCstr8aeRS7G0FVfBBgsF+rwwA7ePXBrXspjx1E+ZeH5iFhZvjq2PTWtX727Aa2nZjk8H8vHc0CMb4+GtaclT0zxg+HzcZFwQY9HS++FZaej4NdhdVmNq2pl/jFmO2z5ZgmveaZ77LNamvlnZkeei8w7wmpK5K8yaHi2lFpLBVZwEO48kQs1M9u4yS4a293omDS9NtjYZf3qQZkK7O9uG4r3bqzMxLNvdoNjD7NnNiAgmrt6FD+bkWJIeJBYv+93Nm2XlRWD4rMj7SEazf98a8lj4TwEUb3bn6wv323bqvP329A1hyzZ5zW7L9/u3L9OxqaACd44OnIuu6XexhURHMWJwFWeJ+LW79p35uOhV86OUgqmqc2PEvM2ornPjBpsTaV7/v+i3H8875lfTstH3hRkotjHJ42nPTsXj361KmAmbzRDsu0BGMxdi8nzSxOLEV2T+xkJ8buQPjLTLQ+6eSvyc0XzARKgAw4puFZPW7Az5enG8m0WNjzR6UZ6ppLLB+CYEVdUmTYehTF2bj0HvzQ+/YgCRHo1RC3Lxalp0NzyJpNUGV6qK0QtzURqHSVeTgZlaGLNWbC3GKhNTwFh1ng83JD340Gz7TV3ruYu0qsYgkIraenznE6B4/xzZJk+c8WBVP0K7mwzsmqfNCv6f3erv1Oz1BcixIQ3L4FHL8OyEteFXDODqt+fioa8zmi23+nvgf46wKgi994t0/D3GlBP+Iqm1C1XDP3pRHh77znzKoXDZ673KY2zmn56VHzYJcTJotcHViq3FGPZLFv7zw775pYJNjJoornprLr62KeGmk0QEP66wfjh/S2m7D6SgvAa7Sqtj3k5VXT0GDjd/R7po055mkwSrAhvy/QI5v4tTabX5zv47S6qx1aaUBKH8smonjn9yctJMVrskxrxa/uLdad9MAONyB14pmuAnUIAf6zkiXIA7LSsfUzKtb6Yz6/r/LcSk1YH7Oq2xaUCAf//hFnwaDqnVBle1RhTu++MY9J75Ye/RiuWGaGNBRcCkeYnur58Fzr3ie4LcURJ9oLAggRPn2ZW36NwXZ+KCl2cFfC2SC8byLcVYu9N8RuU/jVyKW0c0z+dUUBa6X1kkd7MXvjILl0SQTBMAxq/cHtPN0c6S6sYOt+t2JU6Nn69alxupQyZF1QE/2Hci1MjSSJKUWmVTQQWueHNO2Gb0SIKrH5Zvx1KfwSeBPnOk52VXvWJ2dgF6PzctouSxwfajqnh9anbzmxRDuYmO7MFMXhO+I7n/oY7k0JdU1SFzR/NziDvSCNjCSuOqOudHbrfa4Morlot6JFpT9O4/iWy45Kjhfsj+0wk1+DXdDJ+1Karm3Uh+y1PX7sYUEyepYOZucD4AVAX+8/3qxqzrZt/jb2NB+JqdOr+mi+3F0f/Oho5fE7Zf1iPfrIrp5uiZn63LM2cX70ixEfM2O1yS6BRV1GL+hn3fvR0l1dhS1LQZ8oM5m5BTWImZ2dHnFfP/zj723SrcEuCGIBaXvD678ThkmOgC4c//lFdS5cL7s3Nwm8XlDCXY+a+sxhVRKoZNQc4HQ4PkbqxxubFqWwlybRwU0esZ63MORqrVBlfeL9ZWY66tHIeaAuoTqI/Hqc+kNT7+z/erQ6wZ2gPjVsZcFt+A698/NC3LJ/ObX1z8L+bBqCremm5u2Lu7QRtHBf3ty+X4+5gVpt4XyLMT1poaRm0F3zvz16c27Rj6Tfo23D7KXHqLR7/NaJzw1cmbgzFLt+JfEfQNaTWSrN37zyOX4kW/0cTxaC3wqqptPsLPm1KiqKIW1XWRjQBcEUPyy79+9muT/XmvAg02jDgI1t8x2NRg/V6eZWvfw3+MWYEb3l+Iy9+Y02T5sjxr0xE53Z+61QZX/nZEcGedFUEzSjj3fBF4aKsTKn1+7N+k29+3y2wnZ7dfVmEzNSfB5BRW4tc8cyfFv362DKc8nRZ+RZOsOmGFq8Xxvea+Pzv6jqGR9IMLdSyD9Z+yqtkp2Iin1dtLHE92Gcys7PygZbvhf4EDjnB/r8ra+qATM9vRUT1SgX63ViXe9Y1JgsUn/xzruTkKdCO2vbgaN37QfASyy92AV9OyURBk/tJQvg3TP3ZAgL6OFbX1cZsfsLC8eVP+wk17ImqCLKqojfimMV61+P7Z6OOt1QZX/j/A//vU/JxM3mHFVghWpRopO0ej2c3u++9xv25tTFPgm67Af7+VtfV45ufMxvb6+RE0n5m1t7IOmwpi69OTbLU4t4xYHNX7theb668WKFki4OnM+8ePo9u3nYoqanHn6PSgU4xEm3n8zyOX4uLXmvZV21JUidQhk/D7D2NP+pnswtU0BRpd+9DXK/HhnBwMiGAaKsDTl9G/xt1f7p7KZl0cXG7F4FHLgk5GbyXfPXtru1dEOP1Ynxdm4K8WDIRIpjQyZrXa4CpapdUuU7U6Jw6dHPU+ovmeRZM5N1aR/CDKalwYu3Sr6fdE+1v75tetzTo2Dx2fiZVGvwjfzXoD0rkbCvH4d6vwxI9r8MXiLfh0Qa65MoZ5fWeA/nxXvDkHV761LxiYvGYXUodMClrjEIlEPT+VBQj8800krf3HmBUY7NeE6a39e9NkRvMN+YFvXobP3Njk+Yx1BY0j04LVwllVo+CtOYllVoYdJdWo8qsxCNT3J5LBCuFU1NYH7XDt667R0V9say1MCROLR79dhRVbixtvsEIlAn41LbvZCFOzwWxlkI7XkSYpHb8yeG22mfNCNJXI0XZzCFSDP74FTv7ezukCJJtgI3UaGhRzNuzrhBlsCHFRRS0aGhRt2iRXf4lAvlqyBYMvSDW17pM/rsHE1btw8uEHNnutzMI5+f7zwxoAQN4rA5ssrw2Qo8V7p/oXv1rLcK133gAxXJPGHz5qXmtS7NcPwHtSydpVhqMPOSD0jk0KdkENdiJ3wsdzN+Pxa04Ouc7qADU43otOsKDJjH+OWREww/j0rNA3KINHNf2eBGqmW7hpD6rq3LiqV/eA2ygsr415ChIA6PdK4JGi0VBVjApzQ9H/jTkB/2a7S2swJXMXzkk9pHFZsM7oZvoTedMG+Nfo+ItHd7P3I8ia3//Nuc3OOZGItebm1SnBbzaCbdp/4BEQ2SCfihDnv0hr182Mql6/uxw/ZezAv685OeBv74kf10S0T7u1qpor3+GZVk+O/OnC3KBTA/hqUOApG0YmTVy1C2km526K1uQ1u5rUsKw3cRfrtc3o0/b7D/cFHN4f/etTQ9dCRDsRse+7iiprm+zTy7/Dtxneu9lw07bs9qva/2VV6KzPsfJ2Fg500gRgyXxwXm9P3xDzBa6owvr+UC9OCnxMNhdWNAbTdk7d8ueRS0P2o/zd+wsDJsV0Uvbucrwwqfm0Vb6HN9jf7J4v0vHcL1mYZGIkbSTxgxUduzN3lMaes8ynGP61pVbUst3x2a+WNIn5n2ucFs2sC4H49qe87ZMl+HBOTtAuMLFkrrdDqwqugvVxsOLLHUlKh7FLrf8SzMwuwH1fNR3NNis7Hz9Y9CUHgI/nbW7Wp8MsMxnbg7GiY+L9Y1cGnD8xWIfvjSYCx8oQ1eKBmpCe+snZ4f6xDATw965fs1qon1BlhKOwYvHJ/MA1MP3fnBu3MoQSr9QvkYh2nr4tRZWNF7pwNU3hNDQornzL/DEyE9gPem9BzMfd91O9F6Ym6+O5OUgdMink38K/2Olbii2pyQzF6ooEr20m+0RmGaMSt+ypirhvsG9/ykSePSGQVtUsaEcHZbO2x+mkmjpkUuNjMzVpyWDJ5vAnnznrC/DOjI0h1ymqqDNd27Lcp2Onb3+L2npzgcLgUcvQ1kTTr7dqPWNbCa459XBzhYsDM30+3psZ+WTDvhI1k4DZe62W2Ak3kPogwdelr89pfOw/jL7G5cbLk9fhX2Gafr3KalyWDe6xMpiIpF+RdwLwSNPr3DJiCQaecUSTZVZ+tSLZViTrRtovrLy2Hr2fmxbwtUQ9F8SiVdVc+Yr2yxvsbeGariJpkqmorcfLk9ehxuXGzHX5reYkHovnJ2aZqhWIpq+Oby3UhAxrm/a8I5j859Kqcbnx9vQNlu4rEo9+mxF2nXik63DCTwneuTaSs0Espw7vBW+kiQEeK7eWNHk+btlWfL54S7OBA1bx/1x2XJxrTN5IWcF/iprL/HJAtXTR1p4mslZVc+XL97cZyUUskpNVbb0bO0tqcGy3TubfBOCNaeuxbW81JqzaiV2lNTgn9WB8d9+FEW0jGVjZTGU2N8uDUSQ49c0wb1WYO23tblwdoqbq47mbmzW9xdNyvyHZrgbFOS/OCLp+NH+XcJ2onWLV9/Jf361C7x5dTQ/6CMcbQFh9sxVuc9GkBfA24Zi9Zlo5cbxVFm6ydu5Gp5j5tnhjUzuSmJphpo9WsqUbarU1V76GRzAq5KMgowUD3Tk9+WMmLn9jTsSZYl31ni+4dwoCs0kvIxWqz1A8WNnXwMpzgn/b/s8+tVWB0gqY3Y6vcIFFdYRV7nYrrqwLmHTQKx61q0s2F5nqv5U6ZJJlHWpj8f3y7Xj657WWbS/agR3h3PB+8+SZvj5bmGfLfn3tiXFwg5m/TE2AEcPJKNLku5H8NM3OdBHpdsOpDzK6Ppm12uAqHheDH1Z4TvBWDIEvCpFnJVp3fx5bnyy7TvaAs23woWqMrEzu9+mC3ITJ6xOLeDVb3zpiiemBEYk2cshK/uk87OJkb4TnJ2Y16T9KLVsk53tVa2dJsUurDa6sZmUsEGhYbZ8XgjfJWLmfRGFFFXAs06sEqy30nYA41o6z/50YOpWDk/LLmgbzLbHDabIxewxqXG5s21uF3D2VmJ61O+r9pW8pjkty4n+MWd6sljeWEaYDhy+IaXSynZyJV+3Zq5VbDVRzGexG9sslWzBg+Hws2uTcADUzGFxZJF53k04KdcK6NsgUJNEKlaAz2jtqM9mlvYLNfzUlc9/FStWT+yua/iLhsnPbNXw6WvGqxVi70/zULyu2FuOmAPPBJZrUIZNQXhO/88Mj32Tg4tdm4/I35uCnMAMwwgVs4RKrWmHymt3ILYot95j/1/PvXwVOuxMPP2ck9oCIgIwvQiKNnQo2QOkto4/01jCzWjj9UVptcGX1H97bBBjI5iCTplox5YmdPpyTYzp/TaB5uRJNJMkbQ0134VVb34B/jFmB16dmNxvtF7M4nRnMNu2GmpetsKLWsuIOjGAOt6HjM7HCb5RaPEVSM1oQor+a1XwHYIQTLnfQuGWxjQgtMxlURloxuiinaWdz/8+8s9S5WvnHv28+p6A3bcG8OE1a7MvU9DfedR0PScxL9BGGrTa4iqfb/eZHAzyZZ6NNyBkvr6ZlY36YqtfSalfEHfbjIc/GLNz+dpRU49W0yDO9JwKzJ9NQKSyCTfVEiW+MDQmNATRmfE+EgQWJ4JSn0xzbd7DpiGLldIogKweL2KHVpmKoqnV2NFYi1Frl7qnEjyFq3ADAFaLJK6+oMmhSOKfFM0/MAgeT0yYKs5NdOyGegXYwP63c0WQqj2gkUpON1R6IIkVKa/X8xCx03b89Ora3oW4kgb5jQ8eHn9HCPz9YImm1wdV/JyZ21Bsvj34b2QSbvuzMeJ9M/aeTeYj3mCXW1Fw4OftBOJEG2mZr83ZH0PQUbuoUMz6YE/s2qGWIdGJkM96Yuh7fJlBi4HW7wo8I/OfYFWHXcYrp0FdE9hcRc3MZJIGSBGzKon0inUKiJfDtnB2vT5+2NvrRZE4L1SwRjyaLL5dssX0fvkIN8iCK1f9mb2oVA7PixVRwJSK/BZABIM14fqaITLCxXC1esoQOTpXTrr4gdrCqE6iTnbOT0a4QNUf8WxKRk8zWXA0DcC6AEgBQ1QwAx9pSojhxuv9ClQWJReMhWcrpJCs7dJdWuVDvbnC8syjFZmecJmoPJNFHUVHiiSaPHc9QoZntc+VS1VK/ocdJ/beNJM2/HSJJC+CkEfM2O12EVqX3f6fhprOOwqEH7ud0URKeXQGoFTMPXOLgSODW2KRO8ccbwNDM1lytFZE/AWgrIieKyHsAFtlYLkoQaxNsmoEJq0InRWwJfsrYgSKTc63d80VsUxhRc1Y08zLAIX+RTueTiJNZ+7pzNM89oZituXoAwFAAtQDGAZgK4Hm7CkUUzIOtZMj2jyvNZXmORwbtRFXGDt7Ugj3+vfUjAoNJptHZycJUcKWqVfAEV0NFpC2ATqqauBPTESUxVnoQUVpm8o7kJfOjBceKSBcR6QRgDYAsEXk8zHs6isgyEVklImtF5DkrCkxEZCcr+lwRUetmts9VL1UtA/A7AFPgGSk4OMx7agH0V9XeAM4EcK2InB9lOYmI4kKhWLK5KPyKRDaqjWOfq0jmySRzzAZX7UWkPTzB1QRVdSHMaEH18E5I1t74xwYPIkpo2/ZW450ZG5wuBlHclFSZG0CTTJbl7nV0/2aDq48B5AHoBGCeiBwDIOwwMhFpKyIZAAoATFfVZjMYi8i9IpIuIumFhfGfMZyIyN+Szc6emIniKafQ+fk3rfaPMc5OjWMquFLV4ap6lKoOMGqktgC43MT73Kp6JoAeAM4VkdMCrDNCVfuqat+UlJRIy09ERESUUEKOFhSR21X1KxF5NMgqb5nZiaqWiMhsANcCCD/VNREREVGSCldz1cn4v3OQf0GJSIqIHGQ83h/AVQCyYyksERERUaILWXOlqh8b/0eTRuEIAJ8bebHaAPhWVSdGsR0iIiKipGEqiaiI9ADwHoB+xqL5AB5S1e3B3qOqqwGcFXMJiYiIiJKI2dGCnwGYAOBI498vxjIiIiIi8mE2uEpR1c9Utd74NxoAh/YRERER+TEbXBWJyO1G3qq2InI7AKYwJiIiIvJjNri6E8AfAewGsAvAzQDusKtQRERERMnKVId2I2no9TaXhYiIiCjpmR0tmALgHgCpvu9R1TvtKRYRERFRcjIVXAH4GZ70CzMAuO0rDhEREVFyMxtcHaCq/7G1JEREREQtgNkO7RNFZICtJSEiIiJqAcwGVw/BE2BVi0i58a/MzoIRERERJSOzowVDTtJMRERERB5ma64aicgwG8pBRERE1CJEHFyB+a6IiIiIgoomuBLLS0FERETUQkQTXJ1teSmIiIiIWghTwZWIdBWRt0UkHcCvIvKmiHS1uWxEREREScdszdWnAMrgmbz5j8bjz+wqFBEREVGyMpuh/XhV/b3P8+dEJMOG8hARERElNbM1V9UicpH3iYj0A1BtT5GIiIiIkpfZmqv7AHzh08+qGMBf7CkSERERUfIyG1yVqWpvEekCAKpaJiLH2lguIiIioqRktlnwB8ATVKmqd07B7+0pEhEREVHyCllzJSKnADgVQFcRucnnpS4AOtpZMCIiIqJkFK5Z8GQAgwAcBOC3PsvLAdxjU5mIiIiIklbI4EpVfwbws4hcoKqL41QmIiIioqRlqs+Vb2AlIivsKw4RERFRcuPEzUREREQWiia4mmR5KYiIiIhaiIiDK1V9yo6CEBEREbUE4VIxlAPQQC8BUFXtYkupiIiIiJJUuNGCneNVECIiIqKWwOz0NwAAETkMPslDVXWr5SUiIiIiSmKm+lyJyPUishFALoC5APIATAnznqNFZLaIZInIWhF5KObSEhERESU4sx3anwdwPoANqnosgCsALAnznnoAj6lqL+O9/xSRXlGXlIiIiCgJmA2uXKpaBKCNiLRR1dkA+oZ6g6ruUtUVxuNyAOsAHBVTaYmIiIgSnNk+VyUiciCAeQDGiEgBgEqzOxGRVABnAVga4LV7AdwLAD179jS7SSIiIqKEZLbm6gYA1QAeAZAGIAdNJ3IOygjKfgDwsKqW+b+uqiNUta+q9k1JSTFZHCIiIqLEZKrmSlV9a6k+N7txEWkPT2A1RlV/jLBsREREREnH7GjBm0Rko4iUikiZiJSLSLNaKL/3CIBRANap6ltWFJaIiIgo0ZltFnwNwPWq2lVVu6hqZxPZ2fsBGAygv4hkGP8GxFRaIiIiogRntkN7vqqui2TDqroAnmlyiIiIiFoNs8FVuoh8A+AnALXehexHRURERNSU2eCqC4AqAFf7LFMADK6IiIiIfJgdLXiH3QUhIiIiaglMBVciMjzA4lIA6ar6s7VFIiIiIkpeZkcLdgRwJoCNxr8zAPQAcJeIvGNLyYiIiIiSkNk+V2cA6KeqbgAQkQ8BzAdwEYA1NpWNiIiIKOmYrbk6GMCBPs87ATjECLZqA7+FiIiIqPUxW3P1GoAMEZkDT+6qSwC8JCKdAMywqWxEREREScfsaMFRIjIZwLnGoidVdafx+HFbSkZERESUhEI2C4rIKcb/ZwM4AsA249/hxjIiIiIi8hGu5upRAPcCeNN4rn6v97e8RERERERJLFyH9pEicriqXq6qlwP4HEAFgEwAN9teOiIiIqIkEy64+ghAHQCIyCUAXoYnwCoFMMLeohEREREln3DNgm1Vda/x+BYAI1T1BwA/iEiGrSUjIiIiSkLhaq7aiog3ALsCwCyf18ymcSAiIiJqNcIFSOMAzBWRPQCq4cnKDhE5AZ6mQSIiIiLyETK4UtUXRWQmPGkYpqmqd7RgGwAP2F04IiIiomQTtmlPVZcEWLbBnuIQERERJTezcwsSERERkQkMroiIiIgsxOCKiIiIyEIMroiIiIgsxOCKiIiIyEIMroiIiIgsxOCKiIiIyEIMroiIiIgsxOCKiIiIyEIMroiIiIgsxOCKiIiIyEIMroiIiIgsxOCKiIiIyEIMroiIiIgsZFtwJSKfikiBiGTatQ8iIiKiRGNnzdVoANfauH0iIiKihGNbcKWq8wDstWv7RERERImIfa6IiIiILOR4cCUi94pIuoikFxYWOl0cIiIiopg4Hlyp6ghV7auqfVNSUpwuDhEREVFMHA+uiIiIiFoSO1MxjAOwGMDJIrJdRO6ya19EREREiaKdXRtW1dvs2jYRERFRomKzIBEREZGFGFwRERERWYjBFREREZGFGFwRERERWYjBFREREZGFGFwRERERWYjBFREREZGFGFwRERERWYjBFREREZGFGFwRERERWYjBFREREZGFGFwRERERWYjBFREREZGFGFwRERERWYjBFREREZGFGFwRERERWYjBFREREZGFGFwRERERWYjBFREREZGFGFwRERERWYjBFREREZGFGFwRERERWYjBFREREZGFGFwRERERWYjBFREREZGFGFwRERERWYjBFREREZGFGFwRERERWYjBFREREZGFGFwRERERWYjBFREREZGFGFwRERERWYjBFREREZGFbA2uRORaEVkvIptEZIid+yKK1Ku/P93pIlgqpXMHp4tARBH6be8jnS5CWGPvPg8//7Mf3r31zLjvu9cRXZo8P2C/tnEvQzRsC65EpC2A9wFcB6AXgNtEpJdd+4vE1/eeb3rd63sfidn/uqzx+dh7zrOkDD/8/cJmy0b+X9+ottWxfeDDOPbu4GW9vveRyHtlIMbefR7G3n0e5j1+eZPXrzm1O2Y+dmlE5eh24H4hX3/iulMi2p7Xo1edBADo3aNrk3Lu187zuY9P6YTjUjpFvN0Lj++G7++7oPH5d/ddgGMOPQD3X35C0Pdc1at7xPsBmp4Q7r3kODw5YN/f4pErT4p4e6ueuRornr4Ks4xjdFWv7lj25BU44bADTW/jk//ri7xXBmJMiO+Jrz/06YHM565ptvy9285qfHxE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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "We found a signal at 1187008848.3208985s with SNR 4.79138885748144\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "As can be seen in this graph, there is no gravitational wave visible. This is logical, given the masses we used, as gravitational waves produced by these masses would be very weak and unlikely to be detected by the detector. "
      ],
      "metadata": {
        "id": "AEvL8PFHqhE2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# The merger stopped working today (15 march) and I do not know what is wrong sadly. \n",
        "# Drawing the template waveform over the data. \n",
        "\n",
        "from pycbc.filter import sigma\n",
        "# The time, amplitude, and phase of the SNR peak tell us how to align\n",
        "# our proposed signal with the data.\n",
        "\n",
        "# Shift the template to the peak time\n",
        "dt = time - conditioned.start_time\n",
        "aligned = template.cyclic_time_shift(dt)\n",
        "\n",
        "# scale the template so that it would have SNR 1 in this data\n",
        "aligned /= sigma(aligned, psd=psds[ifo], low_frequency_cutoff=15.0)\n",
        "\n",
        "# Scale the template amplitude and phase to the peak value\n",
        "aligned = (aligned.to_frequencyseries() * snrp).to_timeseries()\n",
        "aligned.start_time = conditioned.start_time\n",
        "\n",
        "# We do it this way so that we can whiten both the template and the data\n",
        "white_data = (conditioned.to_frequencyseries() / psds[ifo]**0.5).to_timeseries()\n",
        "\n",
        "# apply a smoothing of the turnon of the template to avoid a transient\n",
        "# from the sharp turn on in the waveform.\n",
        "tapered = aligned.highpass_fir(30, 512, remove_corrupted=False)\n",
        "white_template = (tapered.to_frequencyseries() / psds[ifo]**0.5).to_timeseries()\n",
        "\n",
        "white_data = white_data.highpass_fir(30., 512).lowpass_fir(300, 512)\n",
        "\n",
        "# Select the time around the merger\n",
        "white_data = white_data.time_slice(merger.time-.2, merger.time+.1)\n",
        "white_template = white_template.time_slice(merger.time-.2, merger.time+.1)\n",
        "\n",
        "pylab.figure(figsize=[15, 3])\n",
        "pylab.plot(white_data.sample_times, white_data, label=\"Data\")\n",
        "pylab.plot(white_template.sample_times, white_template, label=\"Template\")\n",
        "pylab.legend()\n",
        "pylab.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "id": "C94v4WXUQCMR",
        "outputId": "59933b37-47d9-41ba-e4ee-4993e59896ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-16-d057e3deac81>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0;31m# Select the time around the merger\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 29\u001b[0;31m \u001b[0mwhite_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwhite_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime_slice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmerger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m.2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmerger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m.1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     30\u001b[0m \u001b[0mwhite_template\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwhite_template\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime_slice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmerger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m.2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmerger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m.1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'merger' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Plotting the Q-transform. "
      ],
      "metadata": {
        "id": "_tCkFmTAqaw3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Plotting the Q-transform. \n",
        "\n",
        "subtracted = conditioned - aligned\n",
        "\n",
        "for data, title in [(conditioned, 'Original H1 Data'),\n",
        "                    (subtracted, 'Signal Subtracted from H1 Data')]:\n",
        "\n",
        "    t, f, p = data.whiten(4, 4).qtransform(.001,\n",
        "                                                  logfsteps=100,\n",
        "                                                  qrange=(8, 8),\n",
        "                                                  frange=(20, 512))\n",
        "    pylab.figure(figsize=[15, 3])\n",
        "    pylab.title(title)\n",
        "    pylab.pcolormesh(t, f, p**0.5, vmin=1, vmax=6)\n",
        "    pylab.yscale('log')\n",
        "    pylab.xlabel('Time (s)')\n",
        "    pylab.ylabel('Frequency (Hz)')\n",
        "    pylab.xlim(merger.time - 2, merger.time + 1)\n",
        "    pylab.show()"
      ],
      "metadata": {
        "id": "2Rjt5aoCR7ig"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Problem 1: Part 3.**"
      ],
      "metadata": {
        "id": "p5hc0sTnq3Cz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from pycbc.psd import aLIGOZeroDetHighPower\n",
        "f_low = 30\n",
        "sample_rate = 4096\n",
        "# function for getting the waveform (see part 1)\n",
        "def get_waveform(m):\n",
        "  hp, hc = get_td_waveform(approximant=\"EOBNRv2\", \n",
        "                            mass1=m, \n",
        "                            mass2=m, \n",
        "                            delta_t=1.0/sample_rate,\n",
        "                            f_lower=f_low)\n",
        "  return hp\n",
        "# resizing the waveforms\n",
        "def resizing(masses):\n",
        "  hp = get_waveform(10)\n",
        "  range = [get_waveform(m) for m in masses]\n",
        "  tlen = max(np.maximum(len(hp), [len(i) for i in range]))\n",
        "  for i in range:\n",
        "    i.resize(tlen)\n",
        "  return hp, tlen, range\n",
        "# Getting the match for the masses. \n",
        "def corr(m):\n",
        "  hp, tlen, templates = resizing(m)\n",
        "  m_val = []\n",
        "  flen = tlen//2 + 1\n",
        "  tc = [{\"h\": i, \"psd\":aLIGOZeroDetHighPower(flen, 1/i.duration, f_low),\"low_frequency_cutoff\":f_low} for i in templates]\n",
        "  hp.resize(tlen)\n",
        "  for i in tc:\n",
        "    p,i = pycbc.filter.match(hp, i[\"h\"], i[\"psd\"],low_frequency_cutoff=i[\"low_frequency_cutoff\"])\n",
        "    m_val.append(p)\n",
        "  return m_val\n",
        "m = np.arange(5,15,0.1)\n",
        "plt.scatter(m, corr(m))\n",
        "plt.xlabel(\"Masses\")\n",
        "plt.ylabel(\"Match\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "lca84vCTnutc",
        "outputId": "379eefde-948b-4c23-c85e-2d7390ca1186"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Match')"
            ]
          },
          "metadata": {},
          "execution_count": 27
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Problem 2: part 1.**"
      ],
      "metadata": {
        "id": "Paf7sz7un9kK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# loading and renaming data\n",
        "d = np.load('/content/drive/MyDrive/noise_ts_4096Hz.npy') \n",
        "time = d[:, 0]\n",
        "strain = d[:, 1]\n",
        "\n",
        "# Converting gravitational wave to time series. \n",
        "data = pycbc.types.TimeSeries(d[:, 1], delta_t = time[1]- time[0], epoch=time[0]) "
      ],
      "metadata": {
        "id": "2iPihub6n5KN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "strain, stilde = {}, {}\n",
        "\n",
        "# Cutting out frequencies below 15 Hz since the detector is not sensitive below this frequency. \n",
        "# Downsampeling sampeling rate to 2048 Hz. \n",
        "# H1 is data from the Hanford detector. L1 is data from the Livingston detector. \n",
        "strain['A'] = resample_to_delta_t(highpass(data, 15.0), 1.0/2048)\n",
        " \n",
        "# Removing beginning and end spikes data. \n",
        "strain['A'] = strain['A'].crop(4, 4)\n",
        "\n",
        " \n",
        "# Putting the data in a frequency series instead of time series. \n",
        "stilde['A'] = strain['A'].to_frequencyseries()"
      ],
      "metadata": {
        "id": "L_dU5Zuvz3Cu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating a place to save the power spectral densities\n",
        "psds = {}\n",
        "# Getting the power spectral densities\n",
        "for ifo in ['A']:\n",
        "\n",
        "    delta_t = strain[ifo].delta_t\n",
        "    seg_len = int(2 / delta_t)\n",
        "    seg_stride = int(seg_len / 2)\n",
        "    psds[ifo]  = pycbc.psd.welch(strain[ifo],\n",
        "                      seg_len=seg_len,\n",
        "                      seg_stride=seg_stride)\n",
        "    \n",
        "    psds[ifo] = interpolate(psds[ifo], stilde[ifo].delta_f)\n",
        "# Setting the range for the masses between 1 and 3 solar masses, going over this range in steps of 0.010 solar masses. \n",
        "mass1 = numpy.arange(5, 10,0.10 ) \n",
        "mass2 = mass1\n",
        "\n",
        "# Variables to store when we've found the max for the snr\n",
        "hmax, smax, tmax, mmax, nsnr = None, {}, {}, 0, 0\n",
        "snrs = {}\n",
        "ifo = 'A'\n",
        "Snr_list = []\n",
        "# Hanford detector. \n",
        "for i in range(len(mass1)):\n",
        "    m = mass1[i] \n",
        "    # Generating the waveform. \n",
        "    hp, hc = get_td_waveform(approximant=\"TaylorT2\",\n",
        "                     mass1=m,\n",
        "                     mass2=m,\n",
        "                     delta_t=strain[ifo].delta_t,\n",
        "                     f_lower=15.0)\n",
        "    # Resizing vector to match the data. \n",
        "    hp.resize(len(strain[ifo]))\n",
        "    template = hp.cyclic_time_shift(hp.start_time)\n",
        "    \n",
        "    snr = matched_filter(template, strain[ifo],\n",
        "                     psd=psds[ifo], low_frequency_cutoff=15.0)\n",
        "    snr_A = snr.crop(4 + 4, 4)\n",
        "\n",
        "    # Adding all of the signal to noise ratios to the list. \n",
        "    Snr_list.append(max(abs(snr_A)))\n",
        "# Putting all the signal to noise ratio's into a list. \n",
        "snrs[ifo] = Snr_list\n",
        "\n",
        "# Now repeating the same for the Livingstone detector. \n",
        "\n",
        "# Plotting the signal to noise of the Livingstone and Hanford detectors. \n",
        "pylab.figure(figsize=[10, 4])\n",
        "pylab.plot(mass1, snrs['A'], label= 'A')\n",
        "pylab.legend('True')\n",
        "pylab.ylabel('Signal-to-noise')\n",
        "pylab.xlabel('mass')\n",
        "pylab.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "duOlj3Opzecg",
        "outputId": "a75776e9-a0cb-4f97-d67e-977363528109"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "So there is no signal in my data, since the signal to noise does not go above 8 (the highest value is 6.75). "
      ],
      "metadata": {
        "id": "B0Nl_5822CLv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Problem 2. Part 2**"
      ],
      "metadata": {
        "id": "aLlSk2k62iZF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "white_data = (data.to_frequencyseries()/psds[ifo]**0.5).to_timeseries()\n",
        "white_data = white_data.crop(4 + 4, 4)\n",
        "plt.hist(white_data, 100, histtype=u'step');\n",
        "plt.xlabel(\"Whitened strain\")\n",
        "plt.ylabel(\"Probability\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 484
        },
        "id": "HeYKQQ1P2OJm",
        "outputId": "38f64f7b-30fd-446c-a5c0-7625002de740"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/pycbc/types/frequencyseries.py\u001b[0m in \u001b[0;36m_typecheck\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m     85\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 86\u001b[0;31m                 _numpy.testing.assert_almost_equal(other._delta_f,\n\u001b[0m\u001b[1;32m     87\u001b[0m                                                    self._delta_f)\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/numpy/testing/_private/utils.py\u001b[0m in \u001b[0;36massert_almost_equal\u001b[0;34m(actual, desired, decimal, err_msg, verbose)\u001b[0m\n\u001b[1;32m    598\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdesired\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mactual\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0;36m1.5\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m10.0\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mdecimal\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 599\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mAssertionError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_build_err_msg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    600\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAssertionError\u001b[0m: \nArrays are not almost equal to 7 decimals\n ACTUAL: 0.0010080645161290322\n DESIRED: 0.001",
            "\nDuring handling of the above exception, another exception occurred:\n",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-41-667e8d5c380a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mwhite_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_frequencyseries\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mpsds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mifo\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m0.5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_timeseries\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mwhite_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mwhite_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m4\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwhite_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhisttype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34mu'step'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Whitened strain\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Probability\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/pycbc/types/array.py\u001b[0m in \u001b[0;36mconvert\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mconvert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m         \u001b[0m_convert_to_scheme\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mconvert\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/pycbc/types/array.py\u001b[0m in \u001b[0;36mcheckother\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m    269\u001b[0m             \u001b[0mnargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    270\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mother\u001b[0m \u001b[0;32min\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 271\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_typecheck\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    272\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0m_ALLOWED_SCALARS\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    273\u001b[0m                     \u001b[0mother\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mforce_precision_to_match\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprecision\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/pycbc/types/frequencyseries.py\u001b[0m in \u001b[0;36m_typecheck\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m     87\u001b[0m                                                    self._delta_f)\n\u001b[1;32m     88\u001b[0m             \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 89\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'different delta_f'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     90\u001b[0m             \u001b[0;31m# consistency of _epoch is not required because we may want\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     91\u001b[0m             \u001b[0;31m# to combine frequency series estimated at different times\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: different delta_f"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Problem 2. Part 3**"
      ],
      "metadata": {
        "id": "XaBn3a0L8U4q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from pycbc.filter import sigmasq\n",
        "hp, hc = get_td_waveform(approximant=\"TaylorT2\",\n",
        "                     mass1=10,\n",
        "                     mass2=10,\n",
        "                     delta_t=conditioned.delta_t,\n",
        "                     f_lower=25.0)\n",
        "SNR = (np.sum((4*hp*np.conj(hp)*hp.delta_f/psd).data).real)**0.5\n",
        "plt.hist(SNR, 100, histtype=u'step');\n",
        "plt.xlabel(\"SNR\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 200
        },
        "id": "oXFXKCvhD6S1",
        "outputId": "ccde8870-efe8-4f46-ffdf-a3b91011ee3a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-44-01f74e4fb043>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m                      \u001b[0mdelta_t\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconditioned\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelta_t\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m                      f_lower=25.0)\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mSNR\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mhp\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconj\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mhp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelta_f\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mpsd\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreal\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m0.5\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for /: 'TimeSeries' and 'FrequencySeries'"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Since I do not get a graph, I will comment on the graph shown in the hints document. \n",
        "\n",
        "The graph shows that the SNR, and thus the noise, is not constant. "
      ],
      "metadata": {
        "id": "H34xEAT7Lofo"
      }
    }
  ]
}